# -*- coding: utf-8 -*-
"""Copy of Task4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hl49AJ-Hiusbo7kI3YHEZ6o8AxjYn3_o

String
"""

def count_vowels(string):
    vowels = "aeiouAEIOU"
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count

print(count_vowels("Hello World"))

def capital (input_string):
    result = ""  # Initialize the result variable
    for i in range(len(input_string)):
        if i % 2 == 1:  # Check if the index is odd (second letter)
            result += input_string[i].upper()
        else:
            result += input_string[i]
    return result

input_string = "boy eats apple"
output_string = capital (input_string)
print(output_string)

"""List"""

def even_numbers(numbers):
    even_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(even_numbers(numbers))

def remove_duplicate(input_list):

    return list(set(input_list))

input_list = [1, 2, 3, 4, 3, 2, 1]
print("Input List:", input_list)
print("List with Duplicates Removed:", remove_duplicates(input_list))

"""Set

Task: Write a function that takes two sets and returns their intersection as a new set.

Task: Write a function that takes two sets and returns their union as a new set.

"""

def intersection(first_set, second_set):
    return first_set.intersection(second_set)

print(intersection({1, 2, 3}, {2, 3, 4}))

def union(first_set, second_set):
    return first_set.union(second_set)

print(union({1, 2, 3}, {2, 3, 4}))

"""Tuple:

(optional)Task: Write a function that takes a list of tuples and sorts them based on the second element of each tuple.

Task: Write a function that takes a tuple and returns a reversed version of that tuple.
"""

def lot52 (x):
    sorted_list = sorted(x, key=lambda x: x[1])
    return sorted_list
print(lot52([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))

def revtup(y):
    rev_ver = tuple(y[::-1])
    return rev_ver


print(revtup(('a', 's', 'b')))

"""Dictionary:

Task: Write a function that takes a dictionary and returns the keys and values as separate lists.

Task: Write a function that takes a dictionary and a key, and if the key exists in the dictionary, return its value. If the key does not exist, return a 'Not Found'.
"""

def dickeva (dictionary):
    keys = list(dictionary.keys())
    values = list(dictionary.values())
    return keys, values
print(dickeva (({'a': 91, 'b': 26, 'c': 67})))

def dickey(dictionary, key):
    if key in dictionary:
        return dictionary[key]
    else:
        return "Not Found"

input_dict = {'a': 1, 'b': 2, 'c': 3}
key = 'b'
print(dickey(input_dict, key))