# -*- coding: utf-8 -*-
"""Python Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dNRPum-grDzgIetuR2I2Jrk9_PyOrjAz

# TASK-1
# String

Write a program to create a new string made of an input string’s first, middle, and last character.

**Example**:

*   "laila"->"lia"
"""

x= input ("Write First and last name")
print(x[0]+x[len(x)//2]+x[-1])

"""Write a program to create a new string made of the middle three characters of an input string.

**Examples**:

*   "JaSonAy"->"Son"
*   "JhonDipPeta"->"Dip"




"""

k = input ("write your name")
print(k[len(k)//2-1:len(k)//2+2])

"""Given two strings, s1 and s2. Write a program to create a new string s3 by appending s2 in the middle of s1.

**Examples**:


*   s1="saleh"/ s2="bassam" --->s3="sabassamleh"


"""

x = input ("write your first name")
y = input ("write your last name")
print(x+y)

"""Please collect two pieces of information from the user: their email address and password. The email should be in the format "example@gmail.com". The password must have at least 8 characters, including special characters(&,%,#,@), numbers, and letters.

If the user inputs an incorrect email or password, display a message indicating so. Otherwise, show "Successful".

 **Hint**: Ensure that the verification statements are included within the function block.
"""

def get_user_credentials(email,password):
     while True :
        email = input ("write your email")
        password = input ("write your password")
        if "@gmail" not in email :
            print ("invalid email")  # Corrected line
        if ".com" not in email :
            print ("invalid email")
        if len(password) < 8:
            print ("incorrect password")
        if any(not char.isdigit() for char in password):
            print ("incorrect password")
        if any(not char.isalpha() for char in password):
            print ("incorrect password")
        password = input("Enter your password: ")
        if any(not char in "&%#@!" for char  in password):
            print ("incorrect password")
        else:
            print("Successful")
            return


get_user_credentials(email,password)

"""# Task-2
# Data Structure

Given two lists, l1 and l2, write a program to create a third list l3 by picking an odd-index element from the list l1 and even index elements from the list l2.

**Example**:

l1 = [3, 6, 9, 12, 15, 18, 21]

l2 = [4, 8, 12, 16, 20, 24, 28]

l3=[6, 12, 18, 4, 12, 20, 28]
"""

def odd_even_merge(l1, l2):
  l3=[]
  for i in range(0, len(l1), 2):
    l3.append(l1[i])
  for i in range(1, len(l2), 2):
    l3.append(l2[i])
  return l3

l1 = [3, 6, 9, 12, 15, 18, 21]
l2 = [4, 8, 12, 16, 20, 24, 28]

l3 = odd_even_merge(l1, l2)
print(l3)

"""*Remove* empty strings from the list of strings.

examples:

list1 = ["Mike", "", "Emma", "Kelly", "", "Brad"]

result=["Mike", "Emma", "Kelly", "Brad"]

**Hint**: read about **filter** built-in function
"""

def remove_empty_strings(list1):
  return list(filter(None, list1))

list1 = ["Mike", "", "Emma", "Kelly", "", "Brad"]
print(remove_empty_strings(list1))

"""Write a program to add item 7000 after 6000 in the following Python List.

[10, 20, [300, 400, [5000, 6000], 500], 30, 40]

the result should be: [10, 20, [300, 400, [5000, 6000, **7000**], 500], 30, 40]
"""

def add_item(list1):
  list1[2][2].append(7000)
  return list1

list1 = [10, 20, [300, 400, [5000, 6000], 500], 30, 40]
print(add_item(list1))

"""Write a Python program to remove items 10, 20, 30 from the following set at once.

set1 = {10, 20, 30, 40, 50}

the result should be: {40, 50}

**Hint**: read about **difference_update** function
"""

def remove_items(set1):
  set1.difference_update({10, 20, 30})
  return set1

set1 = {10, 20, 30, 40, 50}
print(remove_items(set1))

"""Merge two Python dictionaries into one

dict1 = {'Ten': 10, 'Twenty': 20, 'Thirty': 30}

dict2 = {'Thirty': 30, 'Fourty': 40, 'Fifty': 50}

Expected output:

{'Ten': 10, 'Twenty': 20, 'Thirty': 30, 'Fourty': 40, 'Fifty': 50}
"""

def merge_dicts(dict1, dict2):
  dict1.update(dict2)
  return dict1

dict1 = {'Ten': 10, 'Twenty': 20, 'Thirty': 30}
dict2 = {'Thirty': 30, 'Fourty': 40, 'Fifty': 50}
print(merge_dicts(dict1, dict2))

"""Write a function that accepts two arguments: a dictionary and a specified key. The function checks if the specified value exists in the dictionary. If the value exists, it prints **"{value} is present in the dictionary".**

**Example**:

sample_dict = {'a': 100, 'b': 200, 'c': 300}

specified_value=200

result="200 is present in the dictionary"

"""

def check_value(dict1, key):
  if key in dict1.values():
    print(f"{key} is present in the dictionary")

sample_dict = {'a': 100, 'b': 200, 'c': 300}
specified_value = 200
check_value(sample_dict, specified_value)

"""Write a Python program to change Brad’s salary to 8500 in the following dictionary.

sample_dict ={

    'emp1': {'name': 'Jhon', 'salary': 7500},

    'emp2': {'name': 'Emma', 'salary': 8000},

    'emp3': {'name': 'Brad', 'salary': 500}

}

Expected output= {

    'emp1': {'name': 'Jhon', 'salary': 7500},

    'emp2': {'name': 'Emma', 'salary': 8000},

    'emp3': {'name': 'Brad', 'salary': 8500}

}
"""

def change_salary(dict1):
  if 'emp3' in dict1:
    dict1['emp3']['salary'] = 8500
  else:
    raise KeyError("Key 'emp3' not found in dictionary")
  return dict1

sample_dict ={'emp1': {'name': 'Jhon', 'salary': 7500},
              'emp2': {'name': 'Emma', 'salary': 8000},
              'emp3': {'name': 'Brad', 'salary': 500} }

print(change_salary(sample_dict))

"""Remove duplicates from a list and create a tuple and find the minimum and maximum number

**Example**:

sample_list = [87, 45, 41, 65, 94, 41, 99, 94]

Expected Outcome:

unique items [87, 45, 41, 65, 99]

tuple (87, 45, 41, 65, 99)

min: 41

max: 99

"""

def remove_duplicates_and_create_tuple(sample_list):
  unique_items = set(sample_list)
  tuple_items = tuple(unique_items)
  min_value = min(tuple_items)
  max_value = max(tuple_items)
  return unique_items, tuple_items, min_value, max_value
sample_list = [87, 45, 41, 65, 94, 41, 99, 94]
unique_items, tuple_items, min_value, max_value = remove_duplicates_and_create_tuple(sample_list)
print ("unique items", unique_items)
print ("tuple", tuple_items)
print ("min:", min_value)
print ("max:", max_value)

"""Write a program that helps a teacher manage students' grades. The program should do the following:

1. Ask the user for the name of the student and their score (the user should input only **3** students with their grades).
2. Store this information in a dictionary where the student's name is the key and their score is the value.
3. After entering the information for all students, the program should ask the user for a student's name.
4. The program should then print out the student's score if the student is found in the dictionary, otherwise, it should print "Student not found".

***Requirements:***

1. Use if statements to check if a student is found or not.
2. Use the input method to get user input for student names and scores.
3. Use a dictionary to store student names and scores.

***Example:***


Enter student name: Alice

Enter student score: 85

Enter student name: Bob

Enter student score: 90

Enter student name: Charlie

Enter student score: 75

Enter student name to search: Bob

Bob's score is 90
"""

def user_info(name,score):
  student_info[name] = score
  return student_info

student_info = {}
while True:
  name = input("Enter student name: ")
  score = int(input("Enter student score: "))
  user_info(name,score)
  search_name = input("Enter student name to search: ")
  if search_name in student_info:
    print(f"{search_name}'s score is {student_info[search_name]}")
  else:
    print("Student not found")

"""Create a program that helps manage a shopping list. The program should do the following:

1. Ask the user to input 3 items they want to add to their shopping list, one item at a time.
2. Store these items in a list.
3. After the user finishes adding items, the program should print out the shopping list.
4. Then, ask the user if they want to remove any items from the list.
5. If the user wants to remove items, ask them for the name of the item they want to remove and remove it from the list.
6. Finally, print the updated shopping list.

***Requirements:***

1. Use the input method to get user input for adding and removing items.
2. Use a list to store the items in the shopping list.
3. Use if statements to handle the removal of items based on user input.

***Example:***


Enter item to add to the shopping list: Milk
Enter item to add to the shopping list: Eggs
Enter item to add to the shopping list: Bread

Your shopping list:['Milk','Eggs','Bread']

Do you want to remove any items from the list? (yes/no): yes

Enter the item you want to remove: Eggs

Your updated shopping list:['Milk','Bread']
"""

def shopping_list(item):
  shopping_list.append(item)
  return shopping_list

shopping_list = []
while True:
  item = input("Enter item to add to the shopping list: ")
  shopping_list(item)
  print("Your shopping list:", shopping_list)
  remove = input("Do you want to remove any items from the list? (yes/no): ")
  if remove == "yes":
    remove_item = input("Enter the item you want to remove: ")
    if remove_item in shopping_list:
      shopping_list.remove(remove_item)
      print("Your updated shopping list:", shopping_list)
    else:
      print("Item not found in the shopping list.")
      break